
(function () {
  var root        = document.documentElement;
  var body        = document.body;
  var form        = document.getElementById('share-form');
  var out         = document.getElementById('share-output');
  var anchor      = document.getElementById('share-anchor');
  var ttSwitch    = document.getElementById('share-tt');      // new switch in Create
  var numsSwitch  = document.getElementById('share-nums');    // existing switch in Create
  var bgSwitch    = document.getElementById('bg-highest-switch');
  var bgLabel     = document.getElementById('bg-label');
  var gameCont    = document.querySelector('.game-container');

  function setParam(urlString, name, on) {
    try {
      var u = new URL(urlString, location.origin);
      if (on) u.searchParams.set(name, '1'); else u.searchParams.delete(name);
      return u.toString();
    } catch(e) { return urlString; }
  }

  function setLocationParam(name, on) {
    try {
      var u = new URL(window.location.href);
      if (on) {
        u.searchParams.set(name, '1');
      } else {
        u.searchParams.delete(name);
      }
      history.replaceState(null, '', u.toString());
    } catch (e) { /* no-op */ }
  }


  function applyToOutputs(ttOn) {
    if (out && out.value)   out.value   = setParam(out.value, 'tt', ttOn);
    if (anchor && anchor.href) anchor.href = setParam(anchor.href, 'tt', ttOn);
  }

  function forceBackgroundOn() {
    // Force BG ON (transparent mode depends on BG showing the image)
    try { localStorage.setItem('byo2048-bg-enabled', '1'); } catch(e) {}
    if (bgSwitch) bgSwitch.checked = true;
    if (bgLabel)  bgLabel.textContent = 'BG: On';
    if (gameCont) gameCont.classList.add('byobg-on');
    // The existing BG script’s MutationObserver will handle updating the image as tiles change
  }

  function releaseBackground() {
    // Let the user’s BG setting take over again (don’t force Off; just stop forcing it On)
    // We do nothing here; the user’s BG switch & localStorage setting control it.
  }

  function applyTransparent(on) {
    body.classList.toggle('tiles-transparent', !!on);

    if (on) {
      // Override: hide numbers
      root.setAttribute('data-show-nums', '0');
      if (numsSwitch) numsSwitch.checked = false;

      // Override: BG must be ON so the custom image appears as the board background
      forceBackgroundOn();
    } else {
      // Restore numbers according to the Create switch (default is checked)
      if (numsSwitch && numsSwitch.checked) {
        root.setAttribute('data-show-nums', '1');
      } else {
        root.setAttribute('data-show-nums', '0');
      }
      releaseBackground();
    }

    applyToOutputs(!!on);
    setLocationParam('tt', !!on);   // <— write/remove ?tt=1
  }

  // --- Initialize from URL (?tt=1) ---
  var params = new URLSearchParams(location.search);
  var ttOn = params.get('tt') === '1';
  if (ttSwitch) ttSwitch.checked = ttOn;
  applyTransparent(ttOn);

  // --- Keep the Share URL and link in sync ---
  if (ttSwitch) {
    ttSwitch.addEventListener('change', function () {
      applyTransparent(ttSwitch.checked);
    });
  }
  if (form) {
    // When the share URL is regenerated by the form, append/strip ?tt=1
    form.addEventListener('input',  function () { setTimeout(function(){ applyToOutputs(ttSwitch && ttSwitch.checked); }, 0); });
    form.addEventListener('change', function () { setTimeout(function(){ applyToOutputs(ttSwitch && ttSwitch.checked); }, 0); });
  }
})();
